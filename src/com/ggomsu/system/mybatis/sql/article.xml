<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 박성민, 이성호 -->
<mapper namespace="Article">
	<!-- 페이징을 위한 전체 개수 조회 -->
	<select id="findTotal" parameterType="map" resultType="_int">
		SELECT COUNT(A.articleIndex)
		FROM articles AS A
		LEFT OUTER JOIN 
			(SELECT articleIndex, GROUP_CONCAT(tags.tagValue) AS tagString 
			FROM tags 
			GROUP BY tags.articleIndex) AS T
		ON A.articleIndex = T.articleIndex
		WHERE A.deletedAt IS NULL
		AND A.boardValue = #{boardValue}
		<!-- blind list -->
		<if test="blindList != null and blindList.size gt 0">
			AND A.nickname NOT IN 
			<foreach collection="blindList" item="blindMember" separator="," open="(" close=")">
				#{blindMember}
			</foreach>
		</if>
		<!-- search : keyword -->
		<if test='search != null and !"".equals(search)'>
			<choose>
				<when test='"all".equals(category)'>
					AND CONCAT(A.title, A.nickname, A.content, IFNULL(T.tagString, "")) LIKE CONCAT('%', TRIM(#{search}), '%') 
				</when>
				<when test='"nickname".equals(category)'>
					AND A.nickname LIKE CONCAT('%', TRIM(#{search}), '%') 
				</when>
				<when test='"article".quals(category)'>
					AND CONCAT(A.title, A.content) LIKE CONCAT('%', TRIM(#{search}), '%') 
				</when>
				<when test='"tag".equals(category)'>
					AND T.tagString LIKE CONCAT('%', TRIM(#{search}), '%') 
				</when>
			</choose>
		</if>
		<!-- search : period -->
		<if test="period != null">
			<choose>
				<when test='"week".equals(period)'>
					<![CDATA[ AND A.writtenAt >= DATE_SUB(NOW(), INTERVAL 1 WEEK) ]]>
				</when>
				<when test='"month".equals(period)'>
					<![CDATA[ AND A.writtenAt >= DATE_SUB(NOW(), INTERVAL 1 MONTH) ]]>
				</when>
				<when test='"year".equals(period)'>
					<![CDATA[ AND A.writtenAt >= DATE_SUB(NOW(), INTERVAL 1 YEAR) ]]>
				</when>
			</choose>
		</if>
	</select>
	
	<!-- 게시글 조회 : blind, 순서, 검색어, 기간 통합 -->
	<select id="findList" parameterType="map" resultType="article">
		SELECT 	A.articleIndex, A.title, A.nickname , A.writtenAt, A.viewCount, 
				COUNT(AL.articleIndex) AS articleLikeCount, T.tagString
		FROM articles AS A 
		LEFT OUTER JOIN articleLike AS AL
		ON A.articleIndex = AL.articleIndex
		LEFT OUTER JOIN 
			(SELECT articleIndex, GROUP_CONCAT(tags.tagValue) AS tagString 
			FROM tags 
			GROUP BY tags.articleIndex) AS T
		ON A.articleIndex = T.articleIndex
		WHERE A.boardValue = #{boardValue}
		AND A.deletedAt IS NULL
		<!-- blind list -->
		<if test="blindList != null and blindList.size gt 0">
			AND A.nickname NOT IN 
			<foreach collection="blindList" item="blindMember" separator="," open="(" close=")">
				#{blindMember}
			</foreach>
		</if>
		<!-- search : keyword -->
		<if test='search != null and !"".equals(search)'>
			<choose>
				<when test='"all".equals(category)'>
					AND CONCAT(A.title, A.nickname, A.content, IFNULL(T.tagString, "")) LIKE CONCAT('%', TRIM(#{search}), '%') 
				</when>
				<when test='"nickname".equals(category)'>
					AND A.nickname LIKE CONCAT('%', TRIM(#{search}), '%') 
				</when>
				<when test='"article".quals(category)'>
					AND CONCAT(A.title, A.content) LIKE CONCAT('%', TRIM(#{search}), '%') 
				</when>
				<when test='"tag".equals(category)'>
					AND T.tagString LIKE CONCAT('%', TRIM(#{search}), '%') 
				</when>
			</choose>
		</if>
		<!-- search : period -->
		<if test="period != null">
			<choose>
				<when test='"week".equals(period)'>
					<![CDATA[ AND A.writtenAt >= DATE_SUB(NOW(), INTERVAL 1 WEEK) ]]>
				</when>
				<when test='"month".equals(period)'>
					<![CDATA[ AND A.writtenAt >= DATE_SUB(NOW(), INTERVAL 1 MONTH) ]]>
				</when>
				<when test='"year".equals(period)'>
					<![CDATA[ AND A.writtenAt >= DATE_SUB(NOW(), INTERVAL 1 YEAR) ]]>
				</when>
			</choose>
		</if>
		GROUP BY A.articleIndex
		<!-- order criteria -->
		<choose>
			<when test='"like".equals(criteria)'>
			ORDER BY articleLikeCount DESC, A.articleIndex DESC
			</when>
			<when test='"view".equals(criteria)'>
			ORDER BY A.viewCount DESC, A.articleIndex DESC
			</when>
			<otherwise>
			ORDER BY A.articleIndex DESC
			</otherwise>
		</choose>
		LIMIT 10 OFFSET #{page}
	</select>
	<!-- 게시글 세부 CRUD -->
	<select id="findArticle" parameterType="_int" resultType="article">
		SELECT A.*, COUNT(AL.articleIndex) AS articleLikeCount, M.profileImageUrl
		FROM articles AS A 
		LEFT OUTER JOIN articleLike AS AL
		ON A.articleIndex = AL.articleIndex
		LEFT OUTER JOIN members AS M
		ON A.nickname = M.nickname
		WHERE A.articleIndex = #{articleIndex}
	</select>
	<!-- 좋아요 체크 -->
	<select id="checkLiked" parameterType="hashmap" resultType="_int">
		SELECT COUNT(nickname)
		FROM articleLike
		WHERE (articleIndex, nickname) = (#{articleIndex}, #{nickname})
	</select>
	<insert id="doLike" parameterType="hashmap">
		INSERT INTO articleLike(articleIndex, nickname)
		VALUES (#{articleIndex}, #{nickname})
	</insert>
	<delete id="cancelLike" parameterType="hashmap">
		DELETE FROM articleLike
		WHERE (articleIndex, nickname) = (#{articleIndex}, #{nickname})
	</delete>
	<!-- 게시글 볼 때 조회수 상승 -->
	<select id="updateArticleViewCount" parameterType="_int">
		UPDATE articles
		SET viewCount = viewCount + 1
		WHERE articleIndex = #{articleIndex}
	</select>
	<!-- 게시글 작성, 수정, 삭제 -->
	<select id="doInsertArticleProcedure" statementType="CALLABLE" parameterType="article">
		CALL insertArticle(#{boardValue}, #{nickname}, #{title}, #{content})
	</select>
	<update id="updateArticle" parameterType="article">
		UPDATE articles
		SET boardValue = #{boardValue}, title = #{title}, content = #{content}
		WHERE articleIndex = #{articleIndex}
	</update>
	<delete id="deleteArticle" parameterType="_int">
		DELETE FROM articles WHERE articleIndex = #{articleIndex}
	</delete>
	
	<!-- admin에서 사용 -->
	<update id="confirmArticleDelete" parameterType="hashmap">
		UPDATE articles 
		SET deletedAt = now(), articleDeleteReason = #{articleDeleteReason} 
		WHERE articleIndex = #{articleIndex}
	</update>
	
	<!-- 박성민 : 마이 페이지에서 좋아요 목록 보기 -->
	<select id="findMyArticleLikeTotal" parameterType="string" resultType="_int">
		SELECT COUNT(1) FROM articleLike WHERE nickname = #{nickname};
	</select>
	<select id="getArticleLikeList" parameterType="hashmap" resultType="article">
		SELECT A.*, COUNT(AL.articleIndex) AS articleLikeCount, M.profileImageUrl
		FROM articles AS A
		LEFT OUTER JOIN articleLike AS AL
		ON A.articleIndex = AL.articleIndex
		LEFT OUTER JOIN members AS M
		ON A.nickname = M.nickname
		WHERE A.articleIndex IN (SELECT articleIndex FROM articleLike WHERE nickname = #{nickname})
		GROUP BY articleIndex
		ORDER BY articleIndex DESC
		LIMIT 10 OFFSET ${page}
	</select>
	
	<!-- index -->
	<select id="findWeeklyMostLikedList" parameterType="string" resultType="article">
		SELECT A.articleIndex, A.title, A.nickname, A.viewCount, COUNT(AL.articleIndex) as articleLikeCount
		FROM articles AS A
		LEFT OUTER JOIN articleLike AS AL
		ON A.articleIndex = AL.articleIndex
		<![CDATA[ WHERE writtenAt > NOW() - INTERVAL 7 DAY ]]>
		<if test='value != null and !"".equals(value)'>
			AND boardValue = #{boardValue}
		</if>
		GROUP BY A.articleIndex
		ORDER BY articleLikeCount DESC
		LIMIT 5
	</select>
	<select id="findWeeklyMostViewedList" parameterType="string" resultType="article">
		SELECT A.articleIndex, A.title, A.nickname, A.viewCount, COUNT(AL.articleIndex) as articleLikeCount
		FROM articles AS A
		LEFT OUTER JOIN articleLike AS AL
		ON A.articleIndex = AL.articleIndex
		<![CDATA[ WHERE writtenAt > NOW() - INTERVAL 7 DAY ]]>
		<if test='value != null and !"".equals(value)'>
			AND boardValue = #{boardValue}
		</if>
		GROUP BY A.articleIndex
		ORDER BY viewCount DESC
		LIMIT 5
	</select>
</mapper>