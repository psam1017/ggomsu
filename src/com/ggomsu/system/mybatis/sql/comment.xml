<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Comment">
	<!-- 작성자: 김지혜, 박성민 -->
	<select id ="getCommentList" parameterType="map" resultType="comment">
		SELECT C.*, COUNT(CL.commentIndex), M.profileImageUrl,
			(SELECT COUNT(nickname) 
		     FROM commentLike 
    		 WHERE (commentIndex, nickname) = (C.commentIndex, #{nickname})) AS isLiked
		FROM comments as C
		LEFT OUTER JOIN commentLike as CL
		ON C.commentIndex = CL.commentIndex
		LEFT OUTER JOIN members as M
		ON C.nickname = M.nickname
		WHERE articleIndex = #{articleIndex} 
		<if test="blindList != null">
			AND nickname NOT IN 
			<foreach item="blindMember" collection="blindList" separator="," open="(" close=")">
				#{blindMember}
			</foreach>
		</if>
		GROUP BY commentIndex
		ORDER BY refIndex ASC, commentIndex ASC
	</select>
	<select id ="doInsertCommentProcedure" statementType="CALLABLE" parameterType="comment" resultType="comment">
		CALL insertComment(#{articleIndex}, #{nickname}, #{content})
	</select>
	<select id ="doInsertRefCommentProcedure" statementType="CALLABLE" parameterType="comment" resultType="comment">
		CALL insertRefComment(#{refIndex}, #{articleIndex}, #{nickname}, #{content})
	</select>
	<delete id="deleteCommentByCommentIndex" parameterType="_int">
		UPDATE comments
		SET deletedAt = NOW(), commentDeleteReason = '작성자에 의한 삭제'
		WHERE commentIndex=#{commentIndex}
	</delete>
	
	<select id="getCommentOne" parameterType="_int" resultType="comment">
		SELECT C.*, CL.commentLikeCount 
		FROM comments AS C
		LEFT OUTER JOIN (SELECT COUNT(1) AS commentLikeCount, commentIndex FROM commentLike GROUP BY commentIndex) AS CL
		ON C.`commentIndex` = CL.commentIndex
		WHERE C.`commentIndex` = #{commentIndex}
	</select>
	
	<!-- 이성호 : admin에서 사용 -->
	<update id="confirmCommentDelete" parameterType="map">
		UPDATE comments 
		SET deletedAt = now(), commentDeleteReason = #{commentDeleteReason} 
		WHERE commentIndex = #{commentIndex}
	</update>
	
	<!-- 박성민 : my page like comment list에서 사용 -->
	<select id="findMyCommentLikeTotal" parameterType="string" resultType="_int">
		SELECT COUNT(1) FROM commentLike WHERE nickname = #{nickname};
	</select>
	<select id="getCommentLikeList" parameterType="map" resultType="comment">
		SELECT C.*, COUNT(CL.commentIndex) AS commentLikeCount, M.profileImageUrl
		FROM comments AS C
		LEFT OUTER JOIN commentLike AS CL
		ON C.commentIndex = CL.commentIndex
		LEFT OUTER JOIN members AS M
		ON C.nickname = M.nickname
		WHERE C.commentIndex IN (SELECT commentIndex FROM commentLike WHERE nickname = #{nickname})
		GROUP BY commentIndex
		ORDER BY commentIndex DESC
		LIMIT 10 OFFSET ${page}
	</select>
	
	<!-- 박성민, 이성호 : 좋아요 체크 -->
	<select id="checkLiked" parameterType="map" resultType="_int">
		SELECT COUNT(nickname)
		FROM commentLike
		WHERE (commentIndex, nickname) = (#{commentIndex}, #{nickname})
	</select>
	<insert id="doLike" parameterType="map">
		INSERT INTO commentLike(commentIndex, nickname)
		VALUES (#{commentIndex}, #{nickname})
	</insert>
	<delete id="cancelLike" parameterType="map">
		DELETE FROM commentLike
		WHERE (commentIndex, nickname) = (#{commentIndex}, #{nickname})
	</delete>
</mapper>
